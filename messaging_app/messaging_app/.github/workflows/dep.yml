name: Docker Image Build and push

on:
  push:
    branches:
      - master # Trigger on pushes to the 'master' branch
  workflow_dispatch: # Allows manual triggering from the Github UI
    inputs:
      tag:
        description: 'Docker image tag (e.g., latest, v1.0.0, or leave empty for default)'
        required: false
        default: '' # Default to empty, will use run ID if not provided

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repositiry
        uses: actions/checkout@v4 # Action to clone repository code

      - name: Set up Docker Buildx
        # This action sets up Buildx, a Docker CLI plugin for extended build capabilities
        # like multi-platform builds and caching.
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        # This action logs into a Docker registry (like Docker Hub)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # Docker Hub username from Github Secrets
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Docker Hub PAT from GitHUB Secrets

      - name: Determine Image Tags
        id: determine_tags
        run: |
          IMAGE_NAME="MutabPato/messaging_app"

          DEFAULT_TAG="${{ github.sha }}"

          PROVIDED_TAG="${{ github.event.inputs.tag }}"

          if [ -n "$PROVIDED_TAG" ]; then
            TAGS="${IMAGE_NAME}:${PROVIDED_TAG},${IMAGE_NAME}:latest"
          else
            TAGS="${IMAGE_NAME}:${DEFAULT_TAG},${IMAGE_NAME}:latest"
          fi 

          echo "Generated Docker images tags: $TAGS"
          echo "tags=$TAGS" >> "$GITHUB_OUTPUT"

      - name: Build and Push Docker Image
        # This action builds your Docker image and pushes it to the configured registry
        uses: docker/build-push-action@v5
        with:
          context: . # The build context (usually the root of the repository)
          file: ./Dockerfile # Path to the Dockerfile (assuming it's in the root)
          push: true # Set to true to push to Docker Hub
          tags: ${{ steps.determine_tags.output.tags }} # Use the tags determined in the previous step
          


      
